// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BasicBillingContext))]
    [Migration("20240403134236_seed-status")]
    partial class seedstatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Domain.Entities.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillingCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillingStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Charge")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Period")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BillingCategoryId");

                    b.HasIndex("BillingStatusId");

                    b.HasIndex("ClientId");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("Domain.Entities.BillingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BillingCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WATER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ELECTRICITY"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SEWER"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BillingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BillingStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Paid"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Domain.Entities.Billing", b =>
                {
                    b.HasOne("Domain.Entities.BillingCategory", "BillingCategory")
                        .WithMany("Billings")
                        .HasForeignKey("BillingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BillingStatus", "BillingStatus")
                        .WithMany("Billings")
                        .HasForeignKey("BillingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Billings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingCategory");

                    b.Navigation("BillingStatus");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entities.BillingCategory", b =>
                {
                    b.Navigation("Billings");
                });

            modelBuilder.Entity("Domain.Entities.BillingStatus", b =>
                {
                    b.Navigation("Billings");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Billings");
                });
#pragma warning restore 612, 618
        }
    }
}
